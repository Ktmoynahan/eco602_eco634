---
title: "Keegan's R Reference Guide"
author: "Keegan Moynahan"
date: "12/16/2022"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# R Reference Guide {.tabset .tabset-pills}


## Loading Data and Packages
<mark>library()</mark> and <mark>require()</mark> in R are very similar.<mark>library()</mark> is the most used function to load a package in R, you just write the library you want to use inside the (). <mark>require()</mark> is designed to be used in functions in R, if loaded correctly it will return TRUE and FALSE if not loaded correctly. 
```{r}
require(here)
library(palmerpenguins)
```
<mark>read.csv()</mark> is a function used to read a CSV file in the working file directory. <mark>here()</mark> package is used to enable easy file referencing in projects, in the example the <mark>here()</mark> package is pointing to the "data" folder in my class project folder and <mark>read.csv()</mark> is reading the named CSV file in the "data" folder. 
```{r}
ginkgo = data.frame(read.csv(here("data", "ginkgo_data_2022.csv")))
## head() tells R to only display some of the data
head(ginkgo)
```

## Data Structures
### c()
The function <mark>c()</mark> combines or concatenates its arguments into a vector of elements. It is important to note that all elements must be same type (number or characters). They CAN NOT be combined into the same vector. 
```{r}
my_vector = c(25, 14, 34, 55)
## Typing the name of vector will tell R to display vector
my_vector
```

### length
<mark>length()</mark> is a function in R that is used to get or set the length of a vector or other objects. 
```{r}
## I am showing how to compute the length of "my_vector".
length_vec = length(my_vector)
## print() also tells R to display (see other way to display in c() section)
print(length_vec)
```

### matrix()
The <mark>matrix()</mark> function in R is used to create a 2D rectangular data set in R. This function is similar to <mark>vector()</mark> where all elements must be same type (number or characters). They CAN NOT be combined into the same matrix. The matrix() function takes a vector and turns it into a 2D data set. 
```{r}
## This code is telling the matrix function to create a matrix with the numbers 1-9 and to organize the data into 3 Rows (nrow) and 3 columns (ncol). 
my_matrix = matrix(1:9, nrow = 3, ncol = 3)
my_matrix
```

### data.frame()
The <mark>data.frame()</mark> function creates data frames (tightly coupled collections of variables). Data frames share many properties with matrices. 
```{r}
## Here I am create a data from where I'm assigning values to tree types. 
my_dataframe = data.frame(
            id = c(1:2),
            tree = c("oak", "maple"))
my_dataframe
```

#### Ginkgo nrow(), ncol(), dim()
<mark>nrow()</mark> is a function in R that will set or return the number of rows in the specified data set. <mark>ncol()</mark> is function in R that will set or return the number of columns in the specified data set. <mark>dim()</mark> is a function in R that sets or returns the dimension of the data set. All these functions can also be used on other objects (matrix and Arrays)  
```{r}
## Here I am asking for the number of rows, columns, and the dimension of the "ginkgo" data. 
nrow(ginkgo)
ncol(ginkgo)
dim(ginkgo)
```

## Subsetting
### $
In R the extract operator is used to extract or subset a specific part of data. See example below how to use this operator. 
```{r}
## In this example I am subsetting the "max_width" column from the "ginkgo" data. 
ginkgo_width = ginkgo$max_width
ginkgo_width
```

### []
Using this operator in R tells R to select the value at that position or values for that position from the data. The left side of the "," in the brackets is used for the rows and right side of the "," is used for the columns (x, Y).
```{r}
## This selects the values in the first row of the data.
g_row1 = ginkgo[1, ]
g_row1
## This selects the element of in the second row and third column.
g_element = ginkgo [2,3]
g_element
## This selects the values in the third column. 
g_col3 = ginkgo[ ,3]
g_col3
```

### subset()
This function is used to create subsets of a data frame. 
** Not sure why its is giving a warning after the dat_adelie (talked with Professor Nelson)
```{r}
## In this code I am subsetting the penguins data set into a new data set that only contains species of Adelie penguins. 
dat_adelie = subset(penguins, species == "Adelie")
dat_adelie
```

## Numerical Data Exploration
### summary()
The <mark>summary()</mark> function in R is used to produce result summaries of various models. It can be used as below or as a stand alone. 
```{r}
## This is giving the summary of the my "dat_adelie" data set. note* the summary function doesn't need to be set to a new name for R to produce the summary. 
dat_summary = summary(dat_adelie)
dat_summary
```

### mean()
The <mark>mean()</mark> function in R produces the arithmetic mean of the data set or values. It is also important to note there is an argument inside the function <mark>na.rm</mark> that will strip NA values from the data while calculating the mean (TRUE = strip, FALSE = don't strip). 
```{r}
## Here I am computing the mean of the "body_mass_g" column inside the "dat_adlie" data. 
fit_adelie = mean(dat_adelie$body_mass_g, na.rm = TRUE)
fit_adelie
```

### sd()
The <mark>sd()</mark> function in R takes numerical vectors and logical arguments and returns the standard deviation of them. <mark>na.rm</mark> that will strip NA values from the data while calculating the sd (TRUE = strip, FALSE = don't strip). 
```{r}
## Here I am computing the standard deviation of the "body_mass_g" column of the "dat_adelie" data. 
sd_adelie = sd(dat_adelie$body_mass_g, na.rm = TRUE)
sd_adelie
```

## Graphical Data Exploration
### Plot
The <mark>plot()</mark> function is used to create graphs and charts to visualize data.
Arguments used inside plot:
col: Color of shapes in plot
pch: Creates the shape of points
cex: Creates the amount of scaling plotting text and symbols (1 = default)
main: Creates title for plot
xlab: Creates label for x axis
ylab: Creates label for y axis
xlim: Extent of x axis
ylim: Extent of y axis
```{r fig.align='center'}
## This creates a scatter plot of max leaf depth (x) and max leaf width (y). Inside this plot function I am also telling R to create Red points, use the shape that is stored with value 1, to use a scale of 1, then assigning names to the axis's and title, and then starting the x axis at 30 and end it at 125 and the y axis at 0 to 110. 
plot(max_depth ~ max_width, data = ginkgo, col = "red", pch = 1, cex = 1, 
     xlab = 'Leaf Depth (cm)', ylab = 'Leaf Width (cm)', 
     main = "Scatter Plot of Leaf Depth and Width", xlim = c(30,125), ylim = c(0,110))
```

### Histogram
The histogram function in R creates histograms to visualize data.
Arguments used inside histogram
xlab: Name of x axis
breaks: Number of bins
```{r fig.align='center'}
## Here I am creating a histogram of penguin flipper length then assigning the x axis label and telling R to create 8 bins. 
hist(penguins$flipper_length_mm, xlab = "Flipper Length (mm)", breaks = 8)
```

### Boxplot
This function creates a box plot from a vector or data frame
Arguments used in box plots:
main: Creates title for box plot
ylim: Sets y axis extents
ylab: Creates label for y axis
data: Points to data set to create box plot from
```{r fig.align='center'}
## Here I am first creating a box plot of leaf petiole length. Then I add a title and specify the extents of the Y axis (0-150) and then label the Y axis. 
boxplot(ginkgo$petiole_length, main = "Boxplot of Petiole Length", ylim = c(0,150), ylab = "Petiole Length")
## In the second box plot I am creating a box plot of the leaf max width conditioned on seeds present.
boxplot(max_width ~ seeds_present, data = ginkgo, main = "Conditional BoxPlot of Seeds Present")
```

### Par
This function is used to set or query graphical parameters. In this case we are using it to set the parameters on how to display the four histograms. <mark>par(x, y)</mark>
```{r fig.align='center'}
## Here I am creating a 2 by 2 display of my histograms. Hist1 = Flipper Length, Hist2 = Body Mass, Hist3 = Bill Length, Hist4 = Bill Depth
par(mfrow = c(2, 2))
hist(penguins$flipper_length_mm, xlab = 'Flipper Length (mm)', main = "Penguins Flipper Length")
hist(penguins$body_mass_g, xlab = 'Body Mass (g)', main = "Penguins Body Mass")
hist(penguins$bill_length_mm, xlab = 'Bill Length (mm)', main = "Penguins Bill Length")
hist(penguins$bill_depth_mm, xlab = 'Bill Depth (mm)', main = "Penguins Bill Depth")
```

## Distribution Funtions
### dnorm
This function returns the probability density function of a normal distribution using a random variable (x), population mean and population standard deviation. <mark>dnorm(x, mean, sd)</mark>
```{r}
## x = 0, mean = 0, sd = 1
dnorm(0, 0, 1)
```

### pnorm
This function returns the cumulative density function of a normal distribution using a random variable (x), population mean and population standard deviation. <mark>pnorm(x, mean, sd)</mark>
```{r}
## x = 3, mean = 4, sd = 2
pnorm(3, 4, 2)
```

### qnorm
This function returns the inverse cumulative density function of a normal distribution using a random variable (x), population mean and population standard deviation. <mark>qnorm(x, mean, sd)</mark>
```{r}
## x = .99, mean = 0, sd = 1
qnorm(.99, 0, 1)
```

### dbinom
This function returns the probability density function of a binomial distribution using a random variable (x), size and probability of success. <mark>pnorm(x, size, success)</mark>
```{r}
## x = 3, size = 4, success = 0.25
dbinom(3, 4, 0.25)
```

### pbinom
This function returns the cumulative density function of a binomial distribution using a random variable (x), size and probability of success. <mark>pnorm(x, size, success)</mark>
```{r}
## x = 3, size = 4, success = 0.25
pbinom(3, 4, 0.25)
```

### qbinom
This function returns the inverse cumulative density function of a binomial distribution using a random variable (x), size and probability of success. <mark>pnorm(x, size, success)</mark>
```{r}
## x = 0.5, size = 50, success = 0.5
qbinom(0.5, 50, 0.5)
```



