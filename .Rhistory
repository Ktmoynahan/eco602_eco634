axis(
2,
at = c(0, 1),
labels = c(sample_sizes[1], tail(sample_sizes, 1)))
contour(
x = sim_n_effect_size$effect_size,
y = sim_n_effect_size$sample_size,
z = sim_n_effect_size$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
# html thing ----
persp(
x = sim_n_effect_size$effect_size,
y = sim_n_effect_size$sample_size,
z = sim_n_effect_size$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
install.packages(rgl)
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"n_effect_size_power_sim_plot.html"),
selfcontained = TRUE
)
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(n_sds)
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_j
)
p_vals[i] =  summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
# You should save your simulation results so you don't have to run it every time.
save(
sim_output_dispersion,
file = here::here("data", "lab_ll_dat_dispersion_sim.RData"))
# Line plot of standard deviation (x-axis) and statistical power (y-axis)
plot(pop_sds, pop_sd_powers, xlab = "Dipersion", ylab = "statistical Power", type = "line", main = "Dispersion and Statistical Power Line Plot")
# Add a dotted vertical red line at the observed population standard deviation value.
abline(v = sd_obs, col = "red")
alpha = 0.05
n_sims = 100
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
pop_sd_powers = numeric(n_sds)
for(j in 1:length(pop_sds))
{
pop_sd_j = pop_sds[j]
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_j
)
p_vals[i] =  summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
pop_sd_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_output_dispersion = data.frame(
sd = pop_sds,
power = pop_sd_powers)
# You should save your simulation results so you don't have to run it every time.
save(
sim_output_dispersion,
file = here::here("data", "lab_ll_dat_dispersion_sim.RData"))
# Line plot of standard deviation (x-axis) and statistical power (y-axis)
plot(pop_sds, pop_sd_powers, xlab = "Dipersion", ylab = "statistical Power", type = "line", main = "Dispersion and Statistical Power Line Plot")
# Add a dotted vertical red line at the observed population standard deviation value.
abline(v = sd_obs, col = "red")
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.05, to = , length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(n_sds)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = pop_sds,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficents[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
View(sim_3_dat)
alpha = 0.05
# Start with a small number
n_sims = 10
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(n_sds)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = pop_sds,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficents[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = pop_sds,
st_dev = pop_sd_k
)
p_vals[i] = summary(fit_sim)$coefficents[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k
)
p_vals[i] = summary(fit_sim)$coefficents[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k
)
summary(fit_sim)
p_vals[i] = summary(fit_sim)$coefficents[2, 'Pr(>|t|)']
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k
)
summary(fit_sim)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
View(sim_3_dat)
alpha = 0.05
# Start with a small number
n_sims = 100
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 20
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(n_sds)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k
)
summary(fit_sim)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
save(
sim_3_dat,
file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))
contour(
x = sim_3_dat$effect_size,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
View(sim_3_dat)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds)
contour(
x = sim_3_dat$effect_size,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
persp(
x = sim_3_dat$effect_size,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
contour(
x = sim_3_dat$pop_sds,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
alpha = 0.05
# Start with a small number
n_sims = 100
p_vals = numeric(n_sims)
# What was the observed standard deviation?
sd_obs
# specify the number of different standard deviation values to simulate:
# Start with a small number
n_sds = 50
pop_sds = seq(from = 0.01, to = 1.5, length.out = n_sds)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
pop_sd_powers = numeric(n_sds)
sample_sizes = seq(5, 100)
sim_output_3 = matrix(nrow = length(pop_sds), ncol = length(sample_sizes))
for(k in 1:length(pop_sds))
{
pop_sd_k = pop_sds[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = pop_sd_k
)
summary(fit_sim)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_3[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("Testing standard deviation ", k, " of ", n_sds))
}
image(sim_output_3)
sim_3_dat =
list(
power       = sim_output_3,
sample_size = sample_sizes,
pop_sd      = pop_sds
)
save(
sim_3_dat,
file = here::here("data", "lab_ll_sim_output_dispersion_n_1000.RData"))
contour(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
persp(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
# Persp3d
install.packages("rgl")
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3D(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
# Persp3d
libary("rgl")
# Persp3d
library("rgl")
persp3D(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'red',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
persp3d(
x = sim_3_dat$pop_sd,
y = sim_3_dat$sample_size,
z = sim_3_dat$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'red',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"sim_3_dat_plot.html"),
selfcontained = TRUE
)
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"sim_3_dat_plot.html"),
selfcontained = TRUE
)
saveWidget(
rglwidget(),
file = here(
"docs",
"sim_3_dat_plot.html"),
selfcontained = TRUE
)
