n = 500
slope_newdata = data.frame(
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n
)
)
n = 500
ba_newdata = data.frame(
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n
)
)
slope_newdata$gcki_predicted =
predict(
fit_gcki_slope,
newdata = slope_newdata,
type = "response"
)
ba_newdata$gcki_predicted =
predict(
fit_gcki_ba_tot,
newdata = ba_newdata,
type = "response"
)
par(mfrow = c(2, 1))
# Presence/absence data, translucent points:
plot(
GCKI_pres ~ slope, data = dat_all,
xlab = "Percent Slope",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ slope, data = slope_newdata)
plot(
GCKI_pres ~ ba.tot, data = dat_all,
xlab = "Basal Area",
ylab = "GCKI presence/absence",
pch = 16, cex = 1.5, col = gray(0, 0.2)
)
lines(gcki_predicted ~ ba.tot, data = ba_newdata)
n = 50
ba.tot = seq(
from = min(dat_all$ba.tot, na.rm = T),
to = max(dat_all$ba.tot, na.rm = T),
length.out = n)
slope = seq(
from = min(dat_all$slope, na.rm = T),
to = max(dat_all$slope, na.rm = T),
length.out = n)
new_dat_all = expand.grid(
ba.tot = ba.tot,
slope = slope)
head(new_dat_all)
tail(new_dat_all)
new_dat_all$pred_add = predict(
fit_gcki_both_additive,
newdata = new_dat_all,
type = "response")
new_dat_all$pred_int = predict(
fit_gcki_both_interactive,
newdata = new_dat_all,
type = "response")
z_gcki_add = matrix(
new_dat_all$pred_add,
nrow = length(ba.tot),
byrow = FALSE)
z_gcki_int = matrix(
new_dat_all$pred_int,
nrow = length(ba.tot),
byrow = FALSE)
# Contour ----
par(mfrow = c(1, 2))
contour(
x = ba.tot, y = slope,
z = z_gcki_add,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Additive")
contour(
x = ba.tot,
y = slope,
z = z_gcki_int,
xlab = "Total Basal Area",
ylab = "Percent Slope",
main = "Interactive")
# Lab 12 Q1 ----
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size", main = "Lowess Plot")
points(power ~ sample_size, data = sim_sample_size, col = 'red')
legend(15, 0.6, legend = c("Lowess Fit", "Points"), lty = c(1, 0),  pch = c(NA, 1), col = c("black", "red"), title = "Legend")
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size", main = "Lowess Plot")
require(here)
birds   = read.csv(here("data", "bird.sub.csv"))
hab     = read.csv(here("data", "hab.sub.csv"))
birdhab = merge(
birds, hab, by=c("basin", "sub"))
dim(birdhab)
plot(birdhab$BRCR, birdhab$ls)
fit_1 = lm(birdhab$BRCR ~ birdhab$ls)
abline(a = 0.03, b=0.007)
summary(fit_1)
linear = function(x, y_int, slope)
{
return(y_int + x * slope)
}
linear(x = 1, y_int = 1, slope = 1)
rnorm(fit_1)
linear_simulator = function(x, y_int, slope, st_dev)
{
y_vals = linear(x, y_int, slope)
random_n = rnorm(length(y_vals), mean = 0, sd = st_dev)
return(y_vals + random_n)
}
n = 200
par(mfrow = c(2, 2), mar = c(1, 1, 1, 1))
for (i in 1:4)
{
x = runif(n = n)
plot(
x,
linear_simulator(x, y_int = 1, slope = 4.5, st_dev = 0.1),
main = "", xlab = "x", ylab = "y",
pch = 16, col = rgb(0, 0.2, 0, 0.2),
axes = FALSE)
box()
}
fit_1_coefs = coefficients(fit_1)
str(fit_1_coefs)
fit_1_summary = summary(fit_1)
str(fit_1_summary)
fit_1_summary$sigma
int_obs = fit_1_coefs[1]
slope_obs = fit_1_coefs[2]
sd_obs = fit_1_summary$sigma
plot(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
main = "Simulated Data",
xlab = "late-successional forest",
ylab = "Brown Creeper Abundance")
plot(
birdhab$ls, birdhab$BRCR,
xlab = "late-successional forest extent",
ylab = "Brown Creeper abundance",
pch = 19)
points(
x = birdhab$ls,
y = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
),
col = adjustcolor("red", alpha = 0.3),
pch = 16)
legend(
"topleft",
legend = c("data", "simulation"),
pch = 16,
col = c(1, adjustcolor("red", alpha = 0.3)))
y_sim = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
fit_sim = lm(y_sim ~ birdhab$ls)
summary(fit_sim)
sum_1 = summary(fit_sim)
sum_1$coefficients
sum_1$coefficients[2, 4]
n_sims = 1000
p_vals = numeric(n_sims)
alpha = 0.05
for(i in 1:n_sims)
{
y_sim = linear_simulator(
x = birdhab$ls,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
fit_sim = lm(y_sim ~ birdhab$ls)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sum(p_vals < alpha) / n_sims
linear_sim_fit = function(x, slope, y_int, st_dev)
{
y_sim = linear_simulator(
x = x,
y_int = y_int,
slope = slope,
st_dev = st_dev
)
fit_sim = lm(y_sim ~ x)
return(fit_sim)
}
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
n_effect_sizes = 20
effect_sizes_1 = seq(-.01, .01, length.out = n_effect_sizes)
effect_size_powers = numeric(n_effect_sizes)
for(j in 1:n_effect_sizes)
{
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = birdhab$ls,
y_int = int_obs,
slope = effect_sizes_1[j],
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
effect_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_effect_size =
data.frame(
effect_size = effect_sizes_1,
power       = effect_size_powers)
plot(
power ~ effect_size, data = sim_effect_size,
type = 'l', xlab = 'Effect size', ylab = 'Power')
abline(v = slope_obs, lty = 2, col = 'red')
alpha = 0.05
n_sims = 1000
p_vals = numeric(n_sims)
sample_sizes = seq(5, 100)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
power ~ sample_size, data = sim_sample_size,
type = 'l', xlab = 'Sample size', ylab = 'Power')
abline(v = nrow(birdhab), lty = 2, col = 'red')
alpha = 0.01
n_sims = 50
p_vals = numeric(n_sims)
n_effect_sizes = 20
effect_sizes = seq(-.01, .01, length.out = n_effect_sizes)
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
sample_sizes = seq(10, 50)
sim_output_2 = matrix(nrow = length(effect_sizes), ncol = length(sample_sizes))
for(k in 1:length(effect_sizes))
{
effect_size = effect_sizes[k]
for(j in 1:length(sample_sizes))
{
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = effect_size,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sim_output_2[k, j] = sum(p_vals < alpha) / n_sims
}
print(paste0("computing effect size ", k," of ", length(effect_sizes)))
}
sim_n_effect_size =
list(
power = sim_output_2,
effect_size = effect_sizes,
sample_size = sample_sizes
)
image(
sim_n_effect_size$power,
xlab = "Effect size",
ylab = "Sample Size",
axes = FALSE)
# add x-axis labels
axis(
1,
at = c(0, 0.5, 1),
labels = c(-.01, 0.0, .01))
# add y=axis labels
axis(
2,
at = c(0, 1),
labels = c(sample_sizes[1], tail(sample_sizes, 1)))
contour(
x = sim_n_effect_size$effect_size,
y = sim_n_effect_size$sample_size,
z = sim_n_effect_size$power,
xlab = "effect size",
ylab = "sample size",
main = "Contour Plot of Statistical Power",
levels = seq(0, 1, length.out = 9),
drawlabels = TRUE,
# method = "simple")
method = "edge")
# html thing ----
persp(
x = sim_n_effect_size$effect_size,
y = sim_n_effect_size$sample_size,
z = sim_n_effect_size$power,
xlab = "beta", ylab = "n", zlab = "power",
col = 'lightblue',
theta = 30, phi = 30, expand = .75,
ticktype = 'detailed')
install.packages(rgl)
require(htmlwidgets)
saveWidget(
rglwidget(),
file = here(
"docs", "webGL",
"n_effect_size_power_sim_plot.html"),
selfcontained = TRUE
)
alpha = 0.05
n_sims = 30
p_vals = numeric(n_sims)
sample_sizes = seq(2, 20)
sample_size_powers = numeric(length(sample_sizes))
# The maximum x value in the simulation.
# Use the maximum observed x-value in the data
max_x = max(birdhab$ls)
for(j in 1:length(sample_sizes))
{
# A sequence of equally-spaced x-values:
x_vals = seq(0, max_x, length.out = sample_sizes[j])
for(i in 1:n_sims)
{
fit_sim = linear_sim_fit(
x = x_vals,
y_int = int_obs,
slope = slope_obs,
st_dev = sd_obs
)
p_vals[i] = summary(fit_sim)$coefficients[2, 'Pr(>|t|)']
}
sample_size_powers[j] = sum(p_vals < alpha) / n_sims
}
sim_sample_size =
data.frame(
sample_size = sample_sizes,
power       = sample_size_powers)
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size", main = "Lowess Plot")
fit_lowess_30 = loess(power ~ sample_size, data = sim_sample_size, span = 0.3)
newdata_sample_size = data.frame(sample_size = seq(2, 20, length.out = 100))
plot(
x = newdata_sample_size$sample_size,
y = predict(fit_lowess_30, newdata = newdata_sample_size),
type = "l",
ylab = "Statistical Power", xlab = "Sample Size", main = "Lowess Plot")
points(power ~ sample_size, data = sim_sample_size, col = 'red')
legend(15, 0.6, legend = c("Lowess Fit", "Points"), lty = c(1, 0),  pch = c(NA, 1), col = c("black", "red"), title = "Legend")
coef(summary(fit_gcki_both_interactive))
require(here)
dat_dispersal = read.csv(
here("data", "dispersal.csv"))
exp_fun = function(x, a, b)
{
return(a* exp(-b * x))
}
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_exp_nls)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
ylim = c(0,1),
main = "Marbled Salamander - first time breeders\n Exponential model", col = "blue")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_exp_nls, newdata = dist_newdata))
curve(
exp_fun(x, 2, 0.0034), add = TRUE, from = 0, to = 1500,
ann = FALSE, ylab = "f(x)", col = "red"); box()
legend("topright", legend = c("NLS Fit", "Simulated Points", "Guess Curve"), pch = c(NA, 1, NA), lty = c(1, 0, 1), col = c("black", "blue", "red"))
require(here)
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
# Create model fits
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
coef(summary(fit_gcki_both_interactive))
require(here)
dat_dispersal = read.csv(
here("data", "dispersal.csv"))
exp_fun = function(x, a, b)
{
return(a* exp(-b * x))
}
ricker_fun = function(x, a, b)
{
return(a * x * exp(-b * x))
}
fit_exp_nls = nls(
disp.rate.ftb ~ exp_fun(dist.class, a, b),
data = dat_dispersal,
start = list(b = 0, a = 1))
summary(fit_exp_nls)
plot(
dat_dispersal$dist.class,
dat_dispersal$disp.rate.ftb,
xlim = c(0, 1500),
xlab = "distance class",
ylab = "standardized dispersal rate",
ylim = c(0,1),
main = "Marbled Salamander - first time breeders\n Exponential model", col = "blue")
dist_newdata = data.frame(dist.class = seq(0, 1600, length.out = 1600))
lines(predict(fit_exp_nls, newdata = dist_newdata))
curve(
exp_fun(x, 2, 0.0034), add = TRUE, from = 0, to = 1500,
ann = FALSE, ylab = "f(x)", col = "red"); box()
legend("topright", legend = c("NLS Fit", "Simulated Points", "Guess Curve"), pch = c(NA, 1, NA), lty = c(1, 0, 1), col = c("black", "blue", "red"))
require(here)
dat_bird = read.csv(here("data", "bird.sta.csv"))
dat_habitat = read.csv(here("data", "hab.sta.csv"))
dat_all = merge(dat_bird, dat_habitat)
dat_all$GCKI_pres = dat_all$GCKI > 0
# Create model fits
fit_gcki_slope = glm(GCKI_pres ~ slope, data = dat_all, family = binomial)
fit_gcki_ba_tot = glm(GCKI_pres ~ ba.tot, data = dat_all, family = binomial)
fit_gcki_both_additive = glm(GCKI_pres ~ slope + ba.tot, data = dat_all, family = binomial)
fit_gcki_both_interactive = glm(GCKI_pres ~ slope * ba.tot, data = dat_all, family = binomial)
AIC(fit_gcki_slope)
AIC(fit_gcki_ba_tot)
AIC(fit_gcki_both_additive)
AIC(fit_gcki_both_interactive)
coef(summary(fit_gcki_both_interactive))
